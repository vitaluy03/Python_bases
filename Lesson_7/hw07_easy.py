"""
Задача-1: Реализовать индексацию элементов списка не с нуля, а с 5, т.е. 5, 6, 7
и т.д.
"""
"""
class MyLst(list):
    def __getitem__(self, start_ind):
        print('Изменяем индексацию. Отсчет списка не c 0, а 5 элемемента')
        return list.__getitem__(self, start_ind  - 5)

ML = MyLst('123456789')
print(ML[0])
"""


"""
Задача-2: Придумать любу структуру данных. Она должна содержать два атрибута.
Значение одного атрибута передается в конструктор, а значение другого - определяетсяъ
прямо в конструкторе класса. Для этой структуры данных написать метод,
который должен выполнять какой-то функционал. Создать экземпляр класса, передать
данные. Вызывать метод. Проверить, что находится в переменной-экземпляре класса.
Переопределить метод __str__. Этот метод должен возвращать тот результат,
который вы захотите. Проверить еще раз. В комментарии написать, в чем разница
между подходом с использованием метода __str__ и без него.
"""

"""
class Formula:
    def __init__(self, a):
        self.a = a
        self.b = a ** 2

    def b_square (self):
        self.b_square_attr = float(self.b) ** 2
        return(self.b_square_attr)
    def str(self):
        return "(Значение b в квадрате {})".format(self.b_square_attr)

ex_1 = Formula(5.25)
print(ex_1.b_square())
'''
# разница между подходом с использованием метода __str__ и без него в том, без
#него вызов метода выведет ссылку на обьект в памяти, а с ним можно настроить
#удобочитаемый вид и вывести нужную информацию
"""
"""
Задача-3: Продолжить работу над задачей 2. Добавить еще один метод. Он должен
вывзваться из экземпляра класса. В этот метод нужно передать некое значение.
Сам метод должен ловить значение и что-то с ним делать и возвращать результат.
Реализовать для этого метода декоратор @staticmethod
"""

"""
class Formula:
    def __init__(self, a):
        self.a = a
        self.b = a ** 2

    def b_square(self):
        self.b_square_attr = float(self.b) ** 2
        return self.b_square_attr
    def __str__(self):
        return "(Значение b в квадрате {})".format(self.b_square_attr)
    @staticmethod
    def get_a(a, b):
        new_a = a + b
        return new_a

ex_1 = Formula(5.25)

print(ex_1.b_square())
print(Formula.get_a(100, 200))
print(ex_1.__str__())
"""





